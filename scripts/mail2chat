#!/usr/bin/python3
import logging
import mail2chat
import argparse
import pathlib
import json
import yaml
import sys
import signal


class Mail2ChatCLI:
    def __init__(self):
        # Parse command line arguments and create the SMTP listener
        self.args = self.parse_args()
        self.listeners = mail2chat.tools.get_listeners_from_dict(
            config=self.args.config,
            log_level=logging.DEBUG if self.args.verbose else logging.INFO
        )

        # Start the listeners
        for listener in self.listeners:
            listener.start()

        # Wait for incoming connections
        signal.pause()

    @staticmethod
    def parse_args():
        """
        Sets criteria for arguments and parses them into our args property
        @return: (none) args property will be populated after running
        """
        def config_file(value_string):
            """
            Custom path type to be used by argparse module. This validates that an argument value is an existing JSON
            file's path. This is intended to be used by argparse's add_argument method's type parameter only.
            @param value_string: (string) the value to validated
            @return: (str) the read JSON file data
            """
            # Convert the value to a path object
            path = pathlib.Path(value_string)

            # Ensure the file exists
            if path.exists() and not path.is_dir():
                # Read the file's contents
                with open(str(path), "r") as file:
                    # Check the file type
                    if path.name.endswith(".json"):
                        config_parser = json.load
                    elif path.name.endswith(".yml"):
                        config_parser = yaml.safe_load
                    else:
                        raise argparse.ArgumentTypeError(f"unsupported file type at {str(path)}")

                    # Try to parse the contents
                    try:
                        file_data = config_parser(file)
                        return file_data
                    except Exception as _:
                        raise argparse.ArgumentTypeError(f"failed to parse file at {str(path)}")
            else:
                raise argparse.ArgumentTypeError(f"file at {str(path)} does not exist")

        # Setup parser and define arguments
        parser = argparse.ArgumentParser(description='Run an SMTP server that relays messages to upstream APIs.')
        parser.prog = "mail2chat"
        parser.add_argument(
            '--config', '-c',
            dest="config",
            type=config_file,
            required=True,
            help="Set the path to the config file"
        )
        parser.add_argument(
            "--version", "-V",
            dest="version",
            action="store_true",
            help="Print version"
        )
        parser.add_argument(
            "--verbose", "-v",
            dest="verbose",
            action="store_true",
            help="Log verbose data"
        )

        return parser.parse_args()


# RUNTIME
# Run the CLI, allow user to trigger KeyboardInterrupt (ctl + c) or EOFError (ctl + d) to safely exit the script
try:
    Mail2ChatCLI()
except mail2chat.framework.Error as err:
    print(f"config error: {str(err)}")
    sys.exit(1)
except (LookupError, OSError) as err:
    print(f"error: {str(err)}")
    sys.exit(1)
except (KeyboardInterrupt, EOFError):
    print()
    sys.exit(0)
